/**
* Grid
* Minimal grid system with auto-layout columns
*/

.grid,
.ds-grid {
  display: grid;
  gap: var(--space-md);
  grid-template-columns: minmax(15rem, 1fr);


  @if map-get($breakpoints, "sm") {
    @media (min-width: map-get($breakpoints, "sm")) {
      grid-template-columns: 1fr 1fr;

      & .ds-grid-item-large {
        grid-column: span 2;
      }
    }
  }

  @if map-get($breakpoints, "md") {
    @media (min-width: map-get($breakpoints, "md")) {
      
    }
  }

  @if map-get($breakpoints, "lg") {
    @media (min-width: map-get($breakpoints, "lg")) {
      grid-template-columns: 1fr 1fr 1fr;
    }
  }

  & > * {
    min-width: 0; // HACK for childs in overflow
  }
}

.ds-flexgrid {
  
  & > * {
    margin: var(--space-md) 0;
    width: 100%;
  }

  @if map-get($breakpoints, "sm") {
    @media (min-width: map-get($breakpoints, "sm")) {
      display: flex; 
      flex-flow: row wrap; 
      gap: var(--space-lg);

      & > * {
        flex: 1 0 15rem;
        margin: 0;
      }
    }
  }

  @if map-get($breakpoints, "md") {
    @media (min-width: map-get($breakpoints, "md")) { 
      gap: var(--space-xl);
    }
  }
}

.ds-grid-2-1,
.ds-grid-1-2 {

  @if map-get($breakpoints, "lg") {
    @media (max-width: map-get($breakpoints, "lg")) {
      & > * {
        margin-bottom: var(--space-md);
      }
    }

    @media (min-width: map-get($breakpoints, "lg")) {
      display: grid;
      gap: var(--space-md);
      margin-bottom: var(--space-md);
    }
  }
}

.ds-grid-2-1 {

  @if map-get($breakpoints, "lg") {
    @media (min-width: map-get($breakpoints, "lg")) {
      grid-template-columns: 2fr 1fr;
    }
  }
}

.ds-grid-1-2 {

  @if map-get($breakpoints, "lg") {
    @media (min-width: map-get($breakpoints, "lg")) {
      display: grid;
      grid-template-columns: 1fr 2fr;
      gap: var(--space-md);
    }
  }
}

.ds-flex-row {
  display: flex;
  flex-direction: row;
  align-items: center;
  justify-content: flex-start;
  gap: var(--space-sm);

  & > * {
    margin: 0;
  }
}
