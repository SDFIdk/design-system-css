/**
* Grid
* Minimal grid system with auto-layout columns
*/

.grid,
.ds-grid {
  grid-column-gap: var(--grid-spacing-horizontal);
  grid-row-gap: var(--grid-spacing-vertical);
  display: grid;
  grid-template-columns: 1fr;
  margin-bottom: var(--grid-spacing-horizontal);

  @if map-get($breakpoints, "lg") {
    @media (min-width: map-get($breakpoints, "lg")) {
      grid-template-columns: repeat(auto-fit, minmax(15rem, 1fr));
    }
  }

  & > * {
    min-width: 0; // HACK for childs in overflow
  }
}

.ds-grid-2-1,
.ds-grid-1-2 {

  @if map-get($breakpoints, "lg") {
    @media (max-width: map-get($breakpoints, "lg")) {
      & > * {
        margin-bottom: var(--grid-spacing-vertical);
      }
    }

    @media (min-width: map-get($breakpoints, "lg")) {
      grid-column-gap: var(--grid-spacing-horizontal);
      grid-row-gap: var(--grid-spacing-vertical);
      display: grid;
      margin-bottom: var(--grid-spacing-horizontal);
    }
  }
}

.ds-grid-2-1 {

  @if map-get($breakpoints, "lg") {
    @media (min-width: map-get($breakpoints, "lg")) {
      grid-template-columns: minmax(auto, 66%) minmax(auto, 33%);
    }
  }
}

.ds-grid-1-2 {

  @if map-get($breakpoints, "lg") {
    @media (min-width: map-get($breakpoints, "lg")) {
      display: grid;
      grid-template-columns: minmax(auto, 33%) minmax(auto, 66%);
      gap: var(--grid-spacing-horizontal);
    }
  }
}

.ds-flexgrid {
  
  & > * {
    margin: 1rem 0;
    width: 100%;
  }

  @if map-get($breakpoints, "sm") {
    @media (min-width: map-get($breakpoints, "sm")) {
      display: flex; 
      flex-flow: row wrap; 
      gap: 3.5vw;
      margin-bottom: var(--grid-spacing-horizontal);

      & > * {
        flex: 1 1 auto;
        margin: 0;
        width: 15rem;
      }
    }
  }
}
